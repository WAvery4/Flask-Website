{"version":3,"sources":["Components/SourceSlider.js","App.js","reportWebVitals.js","index.js"],"names":["SourceSlider","props","useState","source","setSource","useEffect","value","type","min","max","className","onInput","e","preventDefault","onChange","Math","sign","target","id","step","App","newsData","setNewsData","overallLeaning","setOverallLeaning","updateOverallLeaning","delta","console","log","fetch","then","res","json","data","disabled","border","frame","rules","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3e33a1c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction SourceSlider(props) {\r\n    \r\n    const [source, setSource] = useState(0);\r\n\r\n    // updates source sliders after data from backend loads in\r\n    useEffect(() => {\r\n        setSource(props.value)\r\n    }, [props.value]);\r\n\r\n    // updates source sliders and overall political leaning\r\n    function sliderInput(e) {\r\n        e.preventDefault();\r\n        props.onChange(Math.sign(e.target.value-source), props.id);\r\n        setSource(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <input type=\"range\" min=\"-1\" max=\"1\" className=\"slider\" value={source} onInput={sliderInput} step=\"0.5\" />\r\n    );\r\n}\r\n\r\nexport default SourceSlider;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SourceSlider from './Components/SourceSlider';\n\nfunction App() {\n\n  const [newsData, setNewsData] = useState([[0,0,0], [0,0,0], [0,0,0], [0,0,0], [0,0,0]]);\n  const [overallLeaning, setOverallLeaning] = useState(0);\n\n  // loads data from the backend\n  useEffect(() => {\n    fetch('/api/data').then(res => res.json()).then(data => {\n      setNewsData(data.data)\n    });\n  }, []);\n\n  // updates overall political leaning when source sliders change\n  function updateOverallLeaning(delta, id) {\n    setOverallLeaning(overallLeaning + delta*newsData[id][1])\n    console.log(overallLeaning)\n  }\n\n  return (\n    <div className=\"App\">\n        <div className=\"toptext\">\n          <p>(Click or hover over <b>?</b> for help)</p>\n          <p>\n            Overall Political Leaning \n            <b className=\"tooltip\"> ?\n              <span className=\"tooltiptext\">\n                Estimated Bias:\n                <br/>\n                Based on the user's interaction with the source reputation, we estimate the political bias\n                of the user and vice versa\n              </span>\n            </b>\n          </p>\n        </div>\n\n        <div className=\"belieftitles\">\n          <p>Liberal</p>\n          <p>Conservative</p>\n        </div>\n      \n        <div className=\"beliefslidercontainer\">\n          <input type=\"range\" min=\"-5\" max=\"5\" className=\"beliefslider\" step=\"0.5\" value={overallLeaning} disabled={true} />\n        </div>\n\n        <div className=\"tablecontainer\">\n          <table className=\"table\" border={1} frame=\"void\" rules=\"rows\">\n            <thead>\n              <tr>\n                <th className=\"tableheader\">News Source \n                  <b className=\"tooltip\"> ?\n                    <span className=\"tooltiptext\">\n                      Source:\n                      <br/>\n                      The website that publishes the article\n                    </span>\n                  </b>\n                </th>\n                <th className=\"tableheader\">Source Political Leaning\n                  <b className=\"tooltip\"> ?\n                    <span className=\"tooltiptext\">\n                      Source Bias:\n                      <br/>\n                      We predicted the bias of the source (left means Liberal, middle means neutral, right means high Conservative, click to sort)\n                    </span>\n                  </b>\n                </th>\n                <th className=\"tableheader\">Source Reputation\n                  <b className=\"tooltip\"> ?\n                    <span className=\"tooltiptext\">\n                      Predicted Reputation:\n                      <br/>\n                      We predict the reputation of the source (left means low, middle means unknown, right means high reputation, click to sort)\n                    </span>\n                  </b>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>{newsData[0][0]}</td>\n                <td>\n                  <div className=\"belieftitlestable\">\n                    <p>Liberal</p>\n                    <p>Conservative</p>\n                  </div>\n                  <input type=\"range\" min=\"-1\" max=\"1\" className=\"slider\" value={newsData[0][1]} step=\"0.5\" disabled={true} />\n                </td>\n                <td><SourceSlider value={newsData[0][2]} onChange={updateOverallLeaning} id={0} /></td>\n              </tr>\n              <tr>\n                <td>{newsData[1][0]}</td>\n                <td>\n                  <div className=\"belieftitlestable\">\n                    <p>Liberal</p>\n                    <p>Conservative</p>\n                  </div>\n                  <input type=\"range\" min=\"-1\" max=\"1\" className=\"slider\" value={newsData[1][1]} step=\"0.5\" disabled={true} />\n                </td>\n                <td><SourceSlider value={newsData[1][2]} onChange={updateOverallLeaning} id={1} /></td>\n              </tr>\n              <tr>\n                <td>{newsData[2][0]}</td>\n                <td>\n                  <div className=\"belieftitlestable\">\n                    <p>Liberal</p>\n                    <p>Conservative</p>\n                  </div>\n                  <input type=\"range\" min=\"-1\" max=\"1\" className=\"slider\" value={newsData[2][1]} step=\"0.5\" disabled={true} />\n                </td>\n                <td><SourceSlider value={newsData[2][2]} onChange={updateOverallLeaning} id={2} /></td>\n              </tr>\n              <tr>\n                <td>{newsData[3][0]}</td>\n                <td>\n                  <div className=\"belieftitlestable\">\n                    <p>Liberal</p>\n                    <p>Conservative</p>\n                  </div>\n                  <input type=\"range\" min=\"-1\" max=\"1\" className=\"slider\" value={newsData[3][1]} step=\"0.5\" disabled={true} />\n                </td>\n                <td><SourceSlider value={newsData[3][2]} onChange={updateOverallLeaning} id={3} /></td>\n              </tr>\n              <tr>\n                <td>{newsData[4][0]}</td>\n                <td>\n                  <div className=\"belieftitlestable\">\n                    <p>Liberal</p>\n                    <p>Conservative</p>\n                  </div>\n                  <input type=\"range\" min=\"-1\" max=\"1\" className=\"slider\" value={newsData[4][1]} step=\"0.5\" disabled={true} />\n                </td>\n                <td><SourceSlider value={newsData[4][2]} onChange={updateOverallLeaning} id={4} /></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}